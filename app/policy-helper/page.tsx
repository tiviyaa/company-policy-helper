"use client";

import { useState, useRef, useEffect } from "react";
import { BiSend, BiBot, BiUser, BiPlus, BiPaperclip, BiTrash, BiEdit } from "react-icons/bi";
import { MdOutlinePolicy } from "react-icons/md";
import { AiOutlineClose } from "react-icons/ai";
import DashboardHeader from '../dashboard/DashboardHeader';
import DashboardFooter from '../dashboard/DashboardFooter';
import Sidebar from '../dashboard/Sidebar';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: string;
  attachments?: File[];
}

interface Chat {
  id: string;
  title: string;
  messages: Message[];
  createdAt: string;
}

export default function PolicyHelper() {
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [chats, setChats] = useState<Chat[]>([
    {
      id: "1",
      title: "Leave Policy Questions",
      messages: [
        {
          id: "1",
          type: "assistant",
          content: "Hello! I'm your AI Policy Assistant. I can help you find information about company policies, leave procedures, HR guidelines, and more. What would you like to know?",
          timestamp: new Date().toISOString()
        }
      ],
      createdAt: new Date().toISOString()
    }
  ]);
  const [currentChatId, setCurrentChatId] = useState("1");
  const [showChatHistory, setShowChatHistory] = useState(true);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const currentChat = chats.find(chat => chat.id === currentChatId);
  const messages = currentChat?.messages || [];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const createNewChat = () => {
    const newChat: Chat = {
      id: Date.now().toString(),
      title: "New Chat",
      messages: [
        {
          id: "1",
          type: "assistant",
          content: "Hello! I'm your AI Policy Assistant. How can I help you today?",
          timestamp: new Date().toISOString()
        }
      ],
      createdAt: new Date().toISOString()
    };
    setChats(prev => [newChat, ...prev]);
    setCurrentChatId(newChat.id);
  };

  const deleteChat = (chatId: string) => {
    setChats(prev => prev.filter(chat => chat.id !== chatId));
    if (chatId === currentChatId) {
      const remainingChats = chats.filter(chat => chat.id !== chatId);
      if (remainingChats.length > 0) {
        setCurrentChatId(remainingChats[0].id);
      } else {
        createNewChat();
      }
    }
  };

  const updateChatTitle = (chatId: string, newTitle: string) => {
    setChats(prev => prev.map(chat => 
      chat.id === chatId ? { ...chat, title: newTitle } : chat
    ));
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setSelectedFiles(prev => [...prev, ...files]);
  };

  const removeFile = (index: number) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if ((!message.trim() && selectedFiles.length === 0) || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: message.trim() || "Uploaded documents",
      timestamp: new Date().toISOString(),
      attachments: selectedFiles.length > 0 ? selectedFiles : undefined
    };

    // Update current chat with user message
    setChats(prev => prev.map(chat => 
      chat.id === currentChatId 
        ? { ...chat, messages: [...chat.messages, userMessage] }
        : chat
    ));

    // Update chat title if it's the first user message
    if (currentChat && currentChat.messages.length === 1 && message.trim()) {
      const title = message.trim().length > 30 
        ? message.trim().substring(0, 30) + "..." 
        : message.trim();
      updateChatTitle(currentChatId, title);
    }

    setMessage("");
    setSelectedFiles([]);
    setIsLoading(true);

    // Simulate API call
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "assistant",
        content: `Based on our company policies and ${selectedFiles.length > 0 ? 'the uploaded documents' : 'available information'}, here's what I found regarding "${userMessage.content}": This is a simulated response. In the actual implementation, this would be generated by your AI assistant after performing vector search through company policy documents${selectedFiles.length > 0 ? ' and your uploaded files' : ''}.The response would include relevant policy sections, specific guidelines, and actionable information for HR personnel.`,
        timestamp: new Date().toISOString()
      };
      
      setChats(prev => prev.map(chat => 
        chat.id === currentChatId 
          ? { ...chat, messages: [...chat.messages, assistantMessage] }
          : chat
      ));
      setIsLoading(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />
      
      <div className="flex-1 flex flex-col">
        <DashboardHeader />

        <div className="flex-1 flex">
          {/* Chat History Sidebar */}
          {showChatHistory && (
            <div className="w-64 bg-white border-r border-gray-200 flex flex-col">
              <div className="p-4 border-b border-gray-200">
                <button
                  onClick={createNewChat}
                  className="w-full flex items-center space-x-2 px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                  <BiPlus size={16} />
                  <span>New Chat</span>
                </button>
              </div>
              
              <div className="flex-1 overflow-y-auto p-2">
                {chats.map((chat) => (
                  <div
                    key={chat.id}
                    className={`group flex items-center justify-between p-3 rounded-lg cursor-pointer mb-1 ${
                      chat.id === currentChatId ? 'bg-blue-50 border border-blue-200' : 'hover:bg-gray-50'
                    }`}
                    onClick={() => setCurrentChatId(chat.id)}
                  >
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">{chat.title}</p>
                      <p className="text-xs text-gray-500">
                        {new Date(chat.createdAt).toLocaleDateString()}
                      </p>
                    </div>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteChat(chat.id);
                      }}
                      className="opacity-0 group-hover:opacity-100 p-1 text-red-500 hover:text-red-700"
                    >
                      <BiTrash size={14} />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Main Chat Area */}
          <div className="flex-1 flex flex-col">
            {/* Chat Header */}
            <div className="bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <MdOutlinePolicy className="text-2xl text-blue-500" />
                <div>
                  <h1 className="text-lg font-semibold text-gray-900">{currentChat?.title}</h1>
                  <p className="text-sm text-gray-500">AI-powered policy assistant</p>
                </div>
              </div>
              <button
                onClick={() => setShowChatHistory(!showChatHistory)}
                className="p-2 text-gray-500 hover:text-gray-700"
              >
                {showChatHistory ? <AiOutlineClose /> : <BiEdit />}
              </button>
            </div>

            {/* Messages Area - Scrollable */}
            <div className="flex-1 overflow-y-auto px-4 py-6">
              <div className="max-w-4xl mx-auto space-y-6">
                {messages.map((msg) => (
                  <div key={msg.id} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`flex max-w-[80%] ${msg.type === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start space-x-3`}>
                      {/* Avatar */}
                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                        msg.type === 'user' 
                          ? 'bg-blue-500 text-white ml-3' 
                          : 'bg-green-500 text-white mr-3'
                      }`}>
                        {msg.type === 'user' ? <BiUser size={16} /> : <BiBot size={16} />}
                      </div>

                      {/* Message Bubble */}
                      <div className={`rounded-2xl px-4 py-3 ${
                        msg.type === 'user'
                          ? 'bg-blue-500 text-white rounded-br-md'
                          : 'bg-white text-gray-900 border border-gray-200 rounded-bl-md shadow-sm'
                      }`}>
                        <p className="text-sm leading-relaxed whitespace-pre-wrap">{msg.content}</p>
                        
                        {/* Show attachments */}
                        {msg.attachments && msg.attachments.length > 0 && (
                          <div className="mt-2 space-y-1">
                            {msg.attachments.map((file, index) => (
                              <div key={index} className="flex items-center space-x-2 text-xs bg-black bg-opacity-10 rounded px-2 py-1">
                                <BiPaperclip size={12} />
                                <span>{file.name}</span>
                              </div>
                            ))}
                          </div>
                        )}
                        
                        <p className={`text-xs mt-2 ${
                          msg.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                        }`}>
                          {formatTime(msg.timestamp)}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}

                {/* Loading indicator */}
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="flex items-start space-x-3 max-w-[80%]">
                      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-green-500 text-white flex items-center justify-center mr-3">
                        <BiBot size={16} />
                      </div>
                      <div className="bg-white rounded-2xl rounded-bl-md px-4 py-3 border border-gray-200 shadow-sm">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>
            </div>

            {/* Input Area - Fixed at Bottom */}
            <div className="bg-white border-t border-gray-200 px-4 py-4">
              <div className="max-w-4xl mx-auto">
                {/* Selected Files */}
                {selectedFiles.length > 0 && (
                  <div className="mb-3 flex flex-wrap gap-2">
                    {selectedFiles.map((file, index) => (
                      <div key={index} className="flex items-center space-x-2 bg-gray-100 rounded-lg px-3 py-2">
                        <BiPaperclip size={16} />
                        <span className="text-sm text-gray-700">{file.name}</span>
                        <button
                          onClick={() => removeFile(index)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <AiOutlineClose size={14} />
                        </button>
                      </div>
                    ))}
                  </div>
                )}

                <form onSubmit={handleSubmit} className="flex items-end space-x-3">
                  <div className="flex-1 relative">
                    <textarea
                      value={message}
                      onChange={(e) => setMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Ask about company policies, leave procedures, HR guidelines..."
                      className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none max-h-32"
                      rows={1}
                      disabled={isLoading}
                      style={{ minHeight: '48px' }}
                    />
                  </div>
                  
                  <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    accept=".pdf,.doc,.docx,.txt"
                    onChange={handleFileSelect}
                    className="hidden"
                  />
                  
                  <button
                    type="button"
                    onClick={() => fileInputRef.current?.click()}
                    className="flex-shrink-0 w-12 h-12 bg-gray-100 text-gray-600 rounded-full hover:bg-gray-200 flex items-center justify-center transition-colors"
                  >
                    <BiPaperclip size={20} />
                  </button>
                  
                  <button
                    type="submit"
                    disabled={isLoading || (!message.trim() && selectedFiles.length === 0)}
                    className="flex-shrink-0 w-12 h-12 bg-blue-500 text-white rounded-full hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center transition-colors"
                  >
                    <BiSend size={20} />
                  </button>
                </form>
                
                <p className="text-xs text-gray-500 mt-2 text-center">
                  Press Enter to send, Shift + Enter for new line • Attach documents with the paperclip icon
                </p>
              </div>
            </div>
          </div>
        </div>

        <DashboardFooter />
      </div>
    </div>
  );
}
